{"version":3,"sources":["component/Todo.js","component/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","removeTodo","style","textDecoration","isCompleted","react_default","a","createElement","className","text","onClick","TodoForm","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","event","preventDefault","type","onChange","target","placeholder","App","todos","setTodos","newTodos","toConsumableArray","splice","map","component_Todo","key","component_TodoForm","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAyBeA,EAvBF,SAAAC,GAA+C,IAA5CC,EAA4CD,EAA5CC,KAAMC,EAAsCF,EAAtCE,MAAOC,EAA+BH,EAA/BG,aAAcC,EAAiBJ,EAAjBI,WACrCC,EAAQ,CACVC,eAAgBL,EAAKM,YAAc,eAAiB,IAUtD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAON,MAAOA,GAC1BJ,EAAKW,KACNJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAZS,WACrBV,EAAaD,KAWyBD,EAAKM,YAAc,qBAAQ,gBAC7DC,EAAAC,EAAAC,cAAA,UAAQG,QATO,WACnBT,EAAWF,KAQP,QCYOY,EA7BE,SAAAd,GAAiB,IAAde,EAAcf,EAAde,QAAcC,EACNC,mBAAS,IADHC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GAClBI,EADkBJ,EAAA,GAgBhC,OACEV,EAAAC,EAAAC,cAAA,QAAMa,SAda,SAAAC,GACnBA,EAAMC,iBACDJ,IAGLN,EAAQM,GACRC,EAAS,OASPd,EAAAC,EAAAC,cAAA,SACEgB,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,SAVkB,SAAAH,GACtBF,EAASE,EAAMI,OAAOP,QAUlBQ,YAAY,gCC8BLC,SAlDH,WAAM,IAAAd,EACUC,mBAAS,CAAC,CAClCL,KAAM,iCACNL,aAAa,GAEb,CACEK,KAAM,2BACNL,aAAa,GAEf,CACEK,KAAM,6CACNL,aAAa,KAXDW,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTe,EADSb,EAAA,GACFc,EADEd,EAAA,GAmBVf,EAAe,SAAAD,GACnB,IAAM+B,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GACrBE,EAAS/B,GAAOK,aAAe0B,EAAS/B,GAAOK,YAC/CyB,EAASC,IAGL7B,EAAa,SAAAF,GACjB,IAAM+B,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GACrBE,EAASE,OAAOjC,EAAO,GACvB8B,EAASC,IAGX,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,4CACCoB,EAAMK,IAAI,SAACnC,EAAMC,GAChB,OAAOM,EAAAC,EAAAC,cAAC2B,EAAD,CACLC,IAAKpC,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,MAGhBI,EAAAC,EAAAC,cAAC6B,EAAD,CAAUxB,QA9BA,SAAAH,GACd,IAAMqB,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GAAPS,OAAA,CAAc,CAAE5B,UAC9BoB,EAASC,UCTOQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e78817f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Todo = ({ todo, index, completeTodo, removeTodo }) => {\n  let style = {\n    textDecoration: todo.isCompleted ? 'line-through' : ''\n  }\n  const handleComplete = () => {\n    completeTodo(index)\n  }\n\n  const handleRemove = () => {\n    removeTodo(index)\n  }\n\n  return (\n    <div className='todo' style={style}>\n      {todo.text}\n      <div>\n        <button onClick={handleComplete}>{todo.isCompleted ? '未完成' : '完成'}</button>\n        <button onClick={handleRemove}>X</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Todo\n","import React, { useState } from 'react'\n\nconst TodoForm = ({ addTodo }) => {\n  const [value, setValue] = useState('')\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (!value) {\n      return\n    }\n    addTodo(value)\n    setValue('')\n  }\n\n  const handleValChange = event => {\n    setValue(event.target.value)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={handleValChange}\n        placeholder=\" 输入任务\"\n      />\n    </form>\n  )\n}\n\nexport default TodoForm\n","import React, { useState } from 'react'\nimport Todo from './component/Todo'\nimport TodoForm from './component/TodoForm'\nimport './App.css'\n\nconst App = () => {\n  const [todos, setTodos] = useState([{\n    text: '试一下 React Hooks',\n    isCompleted: false\n  },\n    {\n      text: '感觉还行',\n      isCompleted: false\n    },\n    {\n      text: '你也来试一试吧',\n      isCompleted: false\n    }])\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }]\n    setTodos(newTodos)\n  }\n\n  const completeTodo = index => {\n    const newTodos = [...todos]\n    newTodos[index].isCompleted = !newTodos[index].isCompleted\n    setTodos(newTodos)\n  }\n\n  const removeTodo = index => {\n    const newTodos = [...todos]\n    newTodos.splice(index, 1)\n    setTodos(newTodos)\n  }\n\n  return (\n    <div className='app'>\n      <div className='todo-list'>\n        <h1 className='title'>创建一个 React Hook Todo</h1>\n        {todos.map((todo, index) => {\n          return <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        })}\n        <TodoForm addTodo={addTodo}/>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}